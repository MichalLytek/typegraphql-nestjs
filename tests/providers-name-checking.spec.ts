import { Test } from "@nestjs/testing";
import { Resolver, Query } from "type-graphql";
import fs from "fs";
import path from "path";

import { TypeGraphQLModule } from "../src/typegraphql.module";

describe("Providers name checking", () => {
  afterAll(async () => {
    fs.unlinkSync(path.join(__dirname, "../schema.gql"));
  });

  @Resolver()
  class HelloResolver {
    @Query(() => String)
    async hello(): Promise<String> {
      return "Hello";
    }
  }

  @Resolver()
  class WorldResolver {
    @Query(() => String)
    async world(): Promise<String> {
      return "World!";
    }
  }

  it("should consider providers with Symbol names", async () => {
    const module = await Test.createTestingModule({
      imports: [
        TypeGraphQLModule.forRoot({
          emitSchemaFile: true,
        }),
      ],
      providers: [
        HelloResolver,
        WorldResolver,
        {
          provide: Symbol(`SOME_DESCRIPTION`),
          useValue: { some: "options" },
        },
      ],
    }).compile();

    const generatedSchema = fs.readFileSync(
      path.join(__dirname, "../schema.gql"),
      "utf-8",
    );

    expect(generatedSchema).toMatchInlineSnapshot(`
      "# -----------------------------------------------
      # !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
      # !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
      # -----------------------------------------------

      type Query {
        hello: String!
        world: String!
      }
      "
    `);

    module.close();
  });
});
